{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#home","title":"HOME","text":""},{"location":"#the-game-dev-codex","title":"The Game Dev Codex","text":""},{"location":"#codex","title":"CODEX","text":"<p>This site consists of notes and tips related to Game Development and mainly  about Unreal Engine. Since Unreal Engine's documentation is missing a lot of  important documentation, I have compiled various <code>code</code>, <code>implementation logic</code>, <code>integration procedures</code> and other <code>tips</code> which I found across different forums, books  and blogs. </p>"},{"location":"#why","title":"Why","text":"<p>I spend hours searching and reading through stuff, so you don't have to, Cheers!</p>"},{"location":"#who-am-i","title":"Who Am I?","text":"<p>I'm a self-taught Game Programmer, and I primarily work with <code>Unreal Engine</code>. I get  high by building, maintaining and testing complex game projects. I love  learning new things and equipping myself better every day. </p> <p>I love working with <code>C++</code> more than anything and really interested to do low level programming</p> <p>Currently, I'm looking for a job in Game Industry where I can work with really smart people and learn to master writing good software from them. </p>"},{"location":"#want-to-contribute","title":"Want to contribute?","text":"<p>You are welcome to contribute to this <code>Codex</code>, just contact me!</p>"},{"location":"Unreal%20Engine/Data%20Structures/TArray%20Tips/","title":"TArray","text":""},{"location":"Unreal%20Engine/Data%20Structures/TArray%20Tips/#sorting-tarray-elements-using-a-predicate","title":"Sorting TArray elements using a Predicate","text":"<p>By default, sorting occurs automatically if the <code>&lt;</code> operator is defined in the element type the TArray holds, otherwise a predicate should be defined</p>"},{"location":"Unreal%20Engine/Data%20Structures/TArray%20Tips/#example","title":"Example","text":"<p>For sorting an TArray based on ping, <code>FOnlineSessionSearchResult</code> has a member called ping which is set by Unreal Engine when you request for available online session for an online match.  <p>You would need to sort the match results by ping so that online sessions with the lowest ping would be at the top of the list.</p> <pre><code>TArray&lt;FOnlineSessionSearchResult&gt; SortedSearchResults = SearchResults; // Assume this has different search results\nSortedSearchResults.Sort(IsLowerPing); // Predicate function passed by reference\n\n/* The predicate would be the following */\nbool static IsLowerPing(const FOnlineSessionSearchResult&amp; ResultA, const FOnlineSessionSearchResult&amp; ResultB)\n{\n  return ResultA.PingInMs &lt; ResultB.PingInMs; \n};\n</code></pre>"},{"location":"Unreal%20Engine/Data%20Structures/TArray%20Tips/#removing-elements-while-iterating-without-shrinking","title":"Removing elements while Iterating without Shrinking","text":"<p>Sometimes we would have to remove from a huge TArray while iterating it. But TArray is a dynamic array which means everytime you remove an element, the array elements have to be moved in memory, which is expensive and waste of time. </p>"},{"location":"Unreal%20Engine/Data%20Structures/TArray%20Tips/#how-to-remove-elements-while-iterating-it","title":"How to remove elements while iterating it?","text":"<ul> <li>Use <code>RemoveAtSwap</code> and <code>Shrink</code> functions</li> <li>Swap the last element with the element you want to remove using RemoveAtSwap</li> <li>RemoveAtSwap function has a 3rd argument, when you pass false to it, the array won't shrink</li> <li>Finally, after iterating the array called Shrink on the array</li> </ul> <p>Order Of Elements</p> <p>This is only useful in cases where the order of elements in the array does not matter</p>"},{"location":"Unreal%20Engine/Data%20Structures/TArray%20Tips/#example_1","title":"Example","text":"<p>Choosing an Actor based on chance, and removing the chosen Actor from the array</p> <pre><code>for (int i = 0; i &lt; OutActors.Num(); i++)\n{\n    if (FMath::RandRange(1, 100) &gt; ChanceOfChoosingLootSpawnActor) // ChanceOfChoosingLootSpawnActor has a value from 1 to 100, so higher the value, the lesser the chance of choosing this actor to remove\n    {\n        OutActors.RemoveAtSwap(i, 1, false);\n        i--;\n    }\n}\nOutActors.Shrink(); // Finally shrink the array\n</code></pre>"},{"location":"Unreal%20Engine/Data%20Structures/TArray%20Tips/#references","title":"References","text":"<ul> <li>Optimizing-tarray-usage-for-performance </li> <li>Array-containers-in-unreal-engine</li> </ul>"}]}