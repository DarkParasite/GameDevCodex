{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#home","title":"HOME","text":""},{"location":"#game-dev-codex","title":"Game Dev Codex","text":"<p>Live site  : GameDevCodex Repo  : DarkParasite/GameDevCodex</p>"},{"location":"#codex","title":"CODEX","text":"<p>This site consists of notes and tips related to Game Development and mainly  about Unreal Engine. Since Unreal Engine's documentation is missing a lot of  important documentation, I have compiled various <code>code</code>, <code>implementation logic</code>, <code>integration procedures</code> and other <code>tips</code> which I found across different forums, books  and blogs.  </p> <p>Why? : I spend hours searching and reading through stuff, so you don't have to, Cheers!</p>"},{"location":"#who-am-i","title":"Who Am I?","text":"<p>I'm a self-taught Game Programmer, and I primarily work with <code>Unreal Engine</code>. I get  high by building, maintaining and testing complex game projects. I love  learning new things and equipping myself better every day. </p> <p>I love working with <code>C++</code> more than anything and really interested to do low level programming</p> <p>Currently, I'm looking for a job in Game Industry where I can work with really smart people and learn to master writing good software from them. </p>"},{"location":"#want-to-contribute","title":"Want to contribute?","text":"<p>You are welcome to contribute to this <code>Codex</code>, just contact me!</p> <p>Email  LinkedIn </p>"},{"location":"#have-any-feedback","title":"Have any feedback?","text":"<p>Provide your feedback by opening an issue in the Github repository. Any feedback is appreciated, help me improve this <code>Codex</code>, you are welcome!  </p> <p>Issues </p> <p> </p>"},{"location":"Unreal%20Engine/Config%20and%20Settings/Developer%20Settings/","title":"Developer Settings","text":""},{"location":"Unreal%20Engine/Config%20and%20Settings/Developer%20Settings/#storing-developer-settings-in-config-file","title":"Storing Developer Settings in Config File","text":"<p>This section is about how to have custom developer settings that can be set in Config/DefaultGame.ini file. Helpful in scenario where you need to be able to modify certain settings via the config file instead of going through  blueprints or C++ to change variables.</p> <p>Let's see an example where I need to have variables like <code>MaxPlayersInSession</code> and <code>MaxNumOfTeams</code> in a config file, so I can modify them easily instead of going through the complex project</p>"},{"location":"Unreal%20Engine/Config%20and%20Settings/Developer%20Settings/#step-1","title":"Step 1 :","text":"<ul> <li>First Step is to create a class derived from <code>UDeveloperSettings</code></li> <li>Make sure to add the Config keyword in the <code>UPROPERTY</code> of the variable you wish to get values from config file</li> <li>Add the following Params to the <code>UCLASS</code> macro based on your requirement</li> </ul> <pre><code>PREPROCESSOR PARAMS\n* Config - Game(Modify the Config/DefaultGame.ini), MyCustomConfig(For custom config files, not sure if works properly in all builds)\n* DefaultConfig - Add this if use Config=Game\n* Blueprintable, BlueprintType - Add this if you want the settings to be exposed to blueprint\n</code></pre>"},{"location":"Unreal%20Engine/Config%20and%20Settings/Developer%20Settings/#example-code","title":"Example Code :","text":"<p><pre><code>UCLASS(Config=Game, DefaultConfig,  Blueprintable, BlueprintType)\nclass MULTIPLAYERSHOOTER_API UMultiplayerSessionsDevSettings : public UDeveloperSettings\n{\n    GENERATED_BODY()\n\npublic:\n\n  // Config Keyword is important\n    UPROPERTY(Config, EditDefaultsOnly, BlueprintReadOnly)\n    uint8 MaxPlayerInSession;\n\n    UPROPERTY(Config, EditDefaultsOnly, BlueprintReadOnly)\n    uint8 MaxTeamCount;\n\n};\n</code></pre> </p>"},{"location":"Unreal%20Engine/Config%20and%20Settings/Developer%20Settings/#step-2","title":"Step 2 :","text":"<ul> <li>Add the required values to the config files</li> <li>When adding the class name make sure to not add the typical <code>U</code> or <code>A</code> prefix of the class names</li> </ul> <pre><code>[/Script/ProjectName.ClassNameWithout(A)(U)Prefix]\nVar1 = 100\nVar2 = 10\n</code></pre>"},{"location":"Unreal%20Engine/Config%20and%20Settings/Developer%20Settings/#example","title":"Example","text":"<pre><code>[/Script/MultiplayerShooter.MultiplayerSessionsDevSettings]\nMaxPlayerInSession = 100 \nMaxTeamCount = 35\n</code></pre>"},{"location":"Unreal%20Engine/Config%20and%20Settings/Developer%20Settings/#step-3","title":"Step 3 :","text":"<ul> <li>It's <code>MORBIN TIME</code>, wait no, I mean it's loading time.</li> <li>Load the variables in BeginPlay or Init</li> <li><code>Class Default Object</code> is already automatically instanced for us and can be  accessed using <code>GetDefault&lt;T&gt;()</code>;</li> </ul>"},{"location":"Unreal%20Engine/Config%20and%20Settings/Developer%20Settings/#example-code_1","title":"Example Code :","text":"<pre><code>if (const UMultiplayerSessionsDevSettings* MultiplayerSessionsDevSettings = GetDefault&lt;UMultiplayerSessionsDevSettings&gt;())\n{\n    MaxPlayersInSession = MultiplayerSessionsDevSettings-&gt;MaxPlayers;\n  MaxTeams = MultiplayerSessionsDevSettings-&gt;MaxTeamCount;\n} \n</code></pre> <p>There you go, now you have developer settings set in config file loaded into your game</p>"},{"location":"Unreal%20Engine/Config%20and%20Settings/Developer%20Settings/#references","title":"References","text":"<ul> <li>https://forums.unrealengine.com/t/how-to-store-variables-to-a-custom-ini-file/330274/6</li> <li>https://www.tomlooman.com/unreal-engine-developer-settings/</li> </ul>"},{"location":"Unreal%20Engine/Data%20Structures/TArray%20Tips/","title":"TArray","text":""},{"location":"Unreal%20Engine/Data%20Structures/TArray%20Tips/#sorting-tarray-elements-using-a-predicate","title":"Sorting TArray elements using a Predicate","text":"<p>By default, sorting occurs automatically if the <code>&lt;</code> operator is defined in the element type the TArray holds, otherwise a predicate should be defined</p>"},{"location":"Unreal%20Engine/Data%20Structures/TArray%20Tips/#example","title":"Example","text":"<p>For sorting an TArray based on ping, <code>FOnlineSessionSearchResult</code> has a member called ping which is set by Unreal Engine when you request for available online session for an online match.  <p>You would need to sort the match results by ping so that online sessions with the lowest ping would be at the top of the list.</p> <pre><code>TArray&lt;FOnlineSessionSearchResult&gt; SortedSearchResults = SearchResults; // Assume this has different search results\nSortedSearchResults.Sort(IsLowerPing); // Predicate function passed by reference\n\n/* The predicate would be the following */\nbool static IsLowerPing(const FOnlineSessionSearchResult&amp; ResultA, const FOnlineSessionSearchResult&amp; ResultB)\n{\n  return ResultA.PingInMs &lt; ResultB.PingInMs; \n};\n</code></pre>"},{"location":"Unreal%20Engine/Data%20Structures/TArray%20Tips/#removing-elements-while-iterating-without-shrinking","title":"Removing elements while Iterating without Shrinking","text":"<p>Sometimes we would have to remove from a huge TArray while iterating it. But TArray is a dynamic array which means everytime you remove an element, the array elements have to be moved in memory, which is expensive and waste of time. </p>"},{"location":"Unreal%20Engine/Data%20Structures/TArray%20Tips/#how-to-remove-elements-while-iterating-it","title":"How to remove elements while iterating it?","text":"<ul> <li>Use <code>RemoveAtSwap</code> and <code>Shrink</code> functions</li> <li>Swap the last element with the element you want to remove using RemoveAtSwap</li> <li>RemoveAtSwap function has a 3rd argument, when you pass false to it, the array won't shrink</li> <li>Finally, after iterating the array called Shrink on the array</li> </ul> <p>Order Of Elements</p> <p>This is only useful in cases where the order of elements in the array does not matter</p>"},{"location":"Unreal%20Engine/Data%20Structures/TArray%20Tips/#example_1","title":"Example","text":"<p>Choosing an Actor based on chance, and removing the chosen Actor from the array</p> <pre><code>for (int i = 0; i &lt; OutActors.Num(); i++)\n{\n    if (FMath::RandRange(1, 100) &gt; ChanceOfChoosingLootSpawnActor) // ChanceOfChoosingLootSpawnActor has a value from 1 to 100, so higher the value, the lesser the chance of choosing this actor to remove\n    {\n        OutActors.RemoveAtSwap(i, 1, false);\n        i--;\n    }\n}\nOutActors.Shrink(); // Finally shrink the array\n</code></pre>"},{"location":"Unreal%20Engine/Data%20Structures/TArray%20Tips/#references","title":"References","text":"<ul> <li>https://www.unrealengine.com/en-US/blog/optimizing-tarray-usage-for-performance</li> <li>https://dev.epicgames.com/documentation/en-us/unreal-engine/array-containers-in-unreal-engine</li> </ul>"},{"location":"Unreal%20Engine/General%20Programming/Delegates/","title":"Delegates","text":""},{"location":"Unreal%20Engine/General%20Programming/Delegates/#why-should-you-use-delegates","title":"Why should you use Delegates?","text":"<p>Delegates are an amazing way of doing callbacks because of the following - Prevents you from the hassle of needing to store and maintain references - In many cases it prevents you from doing casting on objects - Efficient way to pass parameter to a function, it encapsulates the logic and makes it neat - You have the option to bind and unbind callbacks giving more flexibility - Prevents the need to pass parameters through multiple functions, and instead can directly broadcast to the required function</p> <p>and more, it's a neat little feature that saves a lot of time and makes the program more neat and robust</p>"},{"location":"Unreal%20Engine/General%20Programming/Delegates/#where-can-i-learn-about-them-easily","title":"Where can I learn about them easily?","text":"<p>Well, I found this website, it's the best documentation one could ever come across regarding delegates in Unreal Engine. It even has a tool that helps you find the appropriate delegate <code>MACRO</code> that you need for your situation.</p> <p>Here is the website :  Benui/DelegatesAdvanced</p> <p>Check out his website, it got a lot of good content which will be pretty useful to you</p>"}]}