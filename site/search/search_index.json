{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#home","title":"HOME","text":""},{"location":"#game-dev-codex","title":"Game Dev Codex","text":"<p>Live site  : GameDevCodex Repo  : DarkParasite/GameDevCodex</p>"},{"location":"#codex","title":"CODEX","text":"<p>This site consists of notes and tips related to Game Development and mainly  about Unreal Engine. Since Unreal Engine's documentation is missing a lot of  important documentation, I have compiled various <code>code</code>, <code>implementation logic</code>, <code>integration procedures</code> and other <code>tips</code> which I found across different forums, books  and blogs.  </p> <p>Why? I spend hours searching and reading through stuff, so you don't have to, Cheers!</p>"},{"location":"#who-am-i","title":"Who Am I?","text":"<p>I'm a self-taught Game Programmer, and I primarily work with <code>Unreal Engine</code>. I get  high by building, maintaining and testing complex game projects. I love  learning new things and equipping myself better every day. </p> <p>I love working with <code>C++</code> more than anything and really interested to do low level programming</p> <p>Currently, I'm looking for a job in Game Industry where I can work with really smart people and learn to master writing good software from them. </p>"},{"location":"#want-to-contribute","title":"Want to contribute?","text":"<p>You are welcome to contribute to this <code>Codex</code>, just contact me!</p> <p>Email  LinkedIn </p>"},{"location":"#have-any-feedback","title":"Have any feedback?","text":"<p>Provide your feedback by opening an issue in the GitHub repository. Any feedback is appreciated, help me improve this <code>Codex</code>, you are welcome!  </p> <p>Issues </p> <p> </p>"},{"location":"C%2B%2B/StaticKeyword/","title":"Static Keyword","text":""},{"location":"C%2B%2B/StaticKeyword/#static-keyword-in-different-contexts","title":"Static keyword in different Contexts","text":"<p>Static keyword is a bit different in different contexts, and it was a bit confusing for me in the beginning, so let's see what <code>static</code> keyword means in contexts in <code>C++</code>.</p>"},{"location":"C%2B%2B/StaticKeyword/#global-members-internal-linking","title":"Global Members (Internal Linking)","text":"<p>When <code>static</code> keyword is used to declare a global variable it means that that variable is <code>internally linked</code>. </p> <p>Let's see a small overview of internal vs external linking to understand, it's pretty much like private and public access control in <code>classes</code> but for global members.</p>"},{"location":"C%2B%2B/StaticKeyword/#internal-linking","title":"Internal Linking","text":"<ul> <li>In <code>internal linking</code> the variable/function is not visible to other files (translation units) so that particular function is only for the file it is declared in, it cannot be accessed in other files.</li> <li>This means that, you can declare a variable with the same name in another file and the compiler will treat those two variables with same name as different variables and will not throw ambiguity error.</li> <li>So, generally internal linking allows you to have variables and functions with same name and  signature in different files without causing conflicts and ambiguity error.</li> </ul> <p>Ambiguity error</p> <p>Ambiguity error occurs when there are multiple declaration of same variable/functions and the compiler doesn't know which one to use, so it throws error.</p> <p>Consider this example, read the comments for better understanding,</p>"},{"location":"C%2B%2B/StaticKeyword/#foocpp-file","title":"Foo.cpp File","text":"<pre><code>// This variable can only be accessed inside Foo.cpp\nstatic int InternalVariable = 10;\n\n// This function can only be accessed inside Foo.cpp\nstatic void InternalFunction()\n{\n\n}\n\n// This variable can be accessed in any file\nint ExternalVariable = 20;\n\n// This function can be accessed in any file\nvoid ExternalFunction() \n{\n\n}\n</code></pre>"},{"location":"C%2B%2B/StaticKeyword/#barcpp-file","title":"Bar.cpp File","text":"<pre><code>// Externs allows to use the variable in Foo.cpp\nextern int ExternalVariable; \n\n// This variable is different from the one in Foo.cpp, because of static keyword\n// This variable can only be accessed inside Bar.cpp\nstatic int InternalVariable = 20;\n\n// This function is different from the one in Foo.cpp, because of static keyword\n// This function can only be accessed inside Bar.cpp\nstatic void InternalFunction()\n{\n\n}\n\n/*\n * Throws error this is because, ExternalFunction is already declared in Foo.cpp and it does not\n * have a static keyword, which means it's externally linked and not internally linked, will explain\n * a bit more in detail below\n */\nvoid ExternalFunction()\n{\n\n}\n</code></pre>"},{"location":"C%2B%2B/StaticKeyword/#inference-from-the-example","title":"Inference from the Example","text":"<ul> <li> <p>Here, you can see that ExternalFunction throws error, this is because it does not have the static keyword which means that it's externally linked. </p> </li> <li> <p>Externally linked means, the ExternalFunction will be visible to all translation units and when the linker cross-checks, it will see that ExternalFunction is defined twice, once in <code>Foo.cpp</code> and another time in <code>Bar.cpp</code>.</p> </li> <li> <p>Since it is not internal, it means that both definitions of the ExternalFunction points to the same function, and the compiler will not know which one to pick, so it throws ambiguity error</p> </li> </ul>"},{"location":"C%2B%2B/StaticKeyword/#in-short","title":"In Short","text":"<p>Internal keyword is like <code>private</code> access specifier for a file, and restricts the global member to be defined or used only within the file.</p>"},{"location":"C%2B%2B/StaticKeyword/#class-members","title":"Class Members","text":"<ul> <li>Static Keyword for class members can come in handy in many cases. </li> <li>When a variable/function is declared with the keyword static, then that variable/function can be accessed without needing to have an object for that class.</li> <li>To access the class member without any object, just use the scope resolution operator, this beautiful thing - <code>::</code></li> <li>Static functions can only access the static members of the class, it cannot access the non-static members of the class even if it is public.</li> <li>Note that, to access the static class members, the member must be public.</li> </ul> <p>Consider the following example and read the comments for better understanding</p> <pre><code>class Circle\n{\n\npublic:\n\n    // Can be access directly outside the class\n    static float Pi;\n\n    // Cannot be accessed outside the class, it is a class variable, only for the class object\n    float ClassSpecificRadius = 10.f;\n\n    // Cannot be accessed outside the class, this function can only be called with an object\n    float CalculateDiameter()\n    {    \n        return 2.f * ClassSpecificRadius;\n    }\n\n    // Can be access directly outside the class\n    // Does not throw error since we are only accessing the static member of the class which is Pi\n    static float CalculateCircumferenceForRadius(const float Radius)\n    {\n        return 2.f * Pi * Radius;\n    } \n\n    // Throws error since a static function is accessing a class variable, which is not allowed\n    static float CalculateCircumference()\n    {\n        // Here, accessing Pi is fine, since it is a static variable\n        // But accessing ClassSpecificRadius is not allowed since it is a class only variable\n        return 2.f * Pi * ClassSpecificRadius;\n    } \n};\n\nint main()\n{\n    /* [Accessing static members with Scope Resolution operator] */\n\n    // For non-integral type like float, static members must only be initialized outside\n    Circle::Pi = 3.14f; // Valid access no error\n\n    // Valid, does not throw error\n    Circle::CalculateCircumferenceForRadius(20.f); \n\n    // Throws error, since we are trying to access a class variable without an object\n    Circle::ClassSpecificRadius;\n\n    // Throws error, we are trying to access a class function without an object\n    Circle::CalculateDiameter();\n\n    // Throws error, since the function uses a class member in it's definition\n    Circle::CalculateCircumference();\n\n     /* [Accessing class members with an object of the class] */\n\n    // Creating an object for the class\n    Circle CircleInstance = Circle();\n\n    // Vaid access, since we are accessing the members only with an object\n    CircleInstance.ClassSpecificRadius; \n    CircleInstance.CalculateDiameter();\n}\n</code></pre>"},{"location":"C%2B%2B/StaticKeyword/#things-to-note","title":"Things to Note","text":"<ul> <li>Static members of a class has a scope of the program, so it is valid throughout the lifetime of the program.</li> <li>Static members must only be defined once, other it results in ambiguity error, since they are treated like global variables, linker does not like this at all.</li> <li>Static members only have one instance in the memory, unlike class members which are created for each instance of the class created. This is a fundamental characteristic of static.  members\u2014they are associated with the class itself rather than any specific object.</li> </ul>"},{"location":"C%2B%2B/StaticKeyword/#references","title":"References :","text":"<ol> <li><code>Game Engine Architecture</code> book, by Jason Gregory.</li> <li><code>Unreal Engine Source Code</code>, yeah I understood most concepts by using and reading Unreal Engine's source code</li> </ol>"},{"location":"Unreal%20Engine/Config%20and%20Settings/Developer%20Settings/","title":"Developer Settings","text":""},{"location":"Unreal%20Engine/Config%20and%20Settings/Developer%20Settings/#storing-developer-settings-in-config-file","title":"Storing Developer Settings in Config File","text":"<p>This section is about how to have custom developer settings that can be set in Config/DefaultGame.ini file. Helpful in scenario where you need to be able to modify certain settings via the config file instead of going through  blueprints or C++ to change variables.</p> <p>Let's see an example where I need to have variables like <code>MaxPlayersInSession</code> and <code>MaxNumOfTeams</code> in a config file, so I can modify them easily instead of going through the complex project</p>"},{"location":"Unreal%20Engine/Config%20and%20Settings/Developer%20Settings/#step-1","title":"Step 1 :","text":"<ul> <li>First Step is to create a class derived from <code>UDeveloperSettings</code></li> <li>Make sure to add the Config keyword in the <code>UPROPERTY</code> of the variable you wish to get values from config file</li> <li>Add the following Params to the <code>UCLASS</code> macro based on your requirement</li> </ul> <pre><code>PREPROCESSOR PARAMS\n* Config - Game(Modify the Config/DefaultGame.ini), MyCustomConfig(For custom config files, not sure if works properly in all builds)\n* DefaultConfig - Add this if use Config=Game\n* Blueprintable, BlueprintType - Add this if you want the settings to be exposed to blueprint\n</code></pre>"},{"location":"Unreal%20Engine/Config%20and%20Settings/Developer%20Settings/#example-code","title":"Example Code :","text":"<p><pre><code>UCLASS(Config=Game, DefaultConfig,  Blueprintable, BlueprintType)\nclass MULTIPLAYERSHOOTER_API UMultiplayerSessionsDevSettings : public UDeveloperSettings\n{\n    GENERATED_BODY()\n\npublic:\n\n  // Config Keyword is important\n    UPROPERTY(Config, EditDefaultsOnly, BlueprintReadOnly)\n    uint8 MaxPlayerInSession;\n\n    UPROPERTY(Config, EditDefaultsOnly, BlueprintReadOnly)\n    uint8 MaxTeamCount;\n\n};\n</code></pre> </p>"},{"location":"Unreal%20Engine/Config%20and%20Settings/Developer%20Settings/#step-2","title":"Step 2 :","text":"<ul> <li>Add the required values to the config files</li> <li>When adding the class name make sure to not add the typical <code>U</code> or <code>A</code> prefix of the class names</li> </ul> <pre><code>[/Script/ProjectName.ClassNameWithout(A)(U)Prefix]\nVar1 = 100\nVar2 = 10\n</code></pre>"},{"location":"Unreal%20Engine/Config%20and%20Settings/Developer%20Settings/#example","title":"Example","text":"<pre><code>[/Script/MultiplayerShooter.MultiplayerSessionsDevSettings]\nMaxPlayerInSession = 100 \nMaxTeamCount = 35\n</code></pre>"},{"location":"Unreal%20Engine/Config%20and%20Settings/Developer%20Settings/#step-3","title":"Step 3 :","text":"<ul> <li>It's <code>MORBIN TIME</code>, wait no, I mean it's loading time.</li> <li>Load the variables in BeginPlay or Init</li> <li><code>Class Default Object</code> is already automatically instanced for us and can be  accessed using <code>GetDefault&lt;T&gt;()</code>;</li> </ul>"},{"location":"Unreal%20Engine/Config%20and%20Settings/Developer%20Settings/#example-code_1","title":"Example Code :","text":"<pre><code>if (const UMultiplayerSessionsDevSettings* MultiplayerSessionsDevSettings = GetDefault&lt;UMultiplayerSessionsDevSettings&gt;())\n{\n    MaxPlayersInSession = MultiplayerSessionsDevSettings-&gt;MaxPlayers;\n  MaxTeams = MultiplayerSessionsDevSettings-&gt;MaxTeamCount;\n} \n</code></pre> <p>There you go, now you have developer settings set in config file loaded into your game</p>"},{"location":"Unreal%20Engine/Config%20and%20Settings/Developer%20Settings/#references","title":"References","text":"<ul> <li>https://forums.unrealengine.com/t/how-to-store-variables-to-a-custom-ini-file/330274/6</li> <li>https://www.tomlooman.com/unreal-engine-developer-settings/</li> </ul>"},{"location":"Unreal%20Engine/Data%20Structures/TArray%20Tips/","title":"TArray","text":""},{"location":"Unreal%20Engine/Data%20Structures/TArray%20Tips/#sorting-tarray-elements-using-a-predicate","title":"Sorting TArray elements using a Predicate","text":"<p>By default, sorting occurs automatically if the <code>&lt;</code> operator is defined in the element type the TArray holds, otherwise a predicate should be defined</p>"},{"location":"Unreal%20Engine/Data%20Structures/TArray%20Tips/#example","title":"Example","text":"<p>For sorting an TArray based on ping, <code>FOnlineSessionSearchResult</code> has a member called ping which is set by Unreal Engine when you request for available online session for an online match.  <p>You would need to sort the match results by ping so that online sessions with the lowest ping would be at the top of the list.</p> <pre><code>TArray&lt;FOnlineSessionSearchResult&gt; SortedSearchResults = SearchResults; // Assume this has different search results\nSortedSearchResults.Sort(IsLowerPing); // Predicate function passed by reference\n\n/* The predicate would be the following */\nbool static IsLowerPing(const FOnlineSessionSearchResult&amp; ResultA, const FOnlineSessionSearchResult&amp; ResultB)\n{\n  return ResultA.PingInMs &lt; ResultB.PingInMs; \n};\n</code></pre>"},{"location":"Unreal%20Engine/Data%20Structures/TArray%20Tips/#removing-elements-while-iterating-without-shrinking","title":"Removing elements while Iterating without Shrinking","text":"<p>Sometimes we would have to remove from a huge TArray while iterating it. But TArray is a dynamic array which means everytime you remove an element, the array elements have to be moved in memory, which is expensive and waste of time. </p>"},{"location":"Unreal%20Engine/Data%20Structures/TArray%20Tips/#how-to-remove-elements-while-iterating-it","title":"How to remove elements while iterating it?","text":"<ul> <li>Use <code>RemoveAtSwap</code> and <code>Shrink</code> functions</li> <li>Swap the last element with the element you want to remove using RemoveAtSwap</li> <li>RemoveAtSwap function has a 3rd argument, when you pass false to it, the array won't shrink</li> <li>Finally, after iterating the array called Shrink on the array</li> </ul> <p>Order Of Elements</p> <p>This is only useful in cases where the order of elements in the array does not matter</p>"},{"location":"Unreal%20Engine/Data%20Structures/TArray%20Tips/#example_1","title":"Example","text":"<p>Choosing an Actor based on chance, and removing the chosen Actor from the array</p> <pre><code>for (int i = 0; i &lt; OutActors.Num(); i++)\n{\n    if (FMath::RandRange(1, 100) &gt; ChanceOfChoosingLootSpawnActor) // ChanceOfChoosingLootSpawnActor has a value from 1 to 100, so higher the value, the lesser the chance of choosing this actor to remove\n    {\n        OutActors.RemoveAtSwap(i, 1, false);\n        i--;\n    }\n}\nOutActors.Shrink(); // Finally shrink the array\n</code></pre>"},{"location":"Unreal%20Engine/Data%20Structures/TArray%20Tips/#references","title":"References","text":"<ul> <li>https://www.unrealengine.com/en-US/blog/optimizing-tarray-usage-for-performance</li> <li>https://dev.epicgames.com/documentation/en-us/unreal-engine/array-containers-in-unreal-engine</li> </ul>"},{"location":"Unreal%20Engine/General%20Programming/Delegates/","title":"Delegates","text":""},{"location":"Unreal%20Engine/General%20Programming/Delegates/#why-should-you-use-delegates","title":"Why should you use Delegates?","text":"<p>Delegates are an amazing way of doing callbacks because of the following</p> <ul> <li>Prevents you from the hassle of needing to store and maintain references</li> <li>In many cases it prevents you from doing casting on objects</li> <li>Efficient way to pass parameter to a function, it encapsulates the logic and makes it neat</li> <li>You have the option to bind and unbind callbacks giving more flexibility</li> <li>Prevents the need to pass parameters through multiple functions, and instead can directly broadcast to the required function</li> </ul> <p>and more, it's a neat little feature that saves a lot of time and makes the program more neat and robust</p>"},{"location":"Unreal%20Engine/General%20Programming/Delegates/#where-can-i-learn-about-them-easily","title":"Where can I learn about them easily?","text":"<p>Well, I found this website, it's the best documentation one could ever come across regarding delegates in Unreal Engine. It even has a tool that helps you find the appropriate delegate <code>MACRO</code> that you need for your situation.</p> <p>Here is the website :  Benui/DelegatesAdvanced</p> <p>Check out his website, its got a lot of good content which will be pretty useful to you</p>"},{"location":"Unreal%20Engine/Steam%20SDK/Intro/","title":"Introduction","text":""},{"location":"Unreal%20Engine/Steam%20SDK/Intro/#steam-sdk","title":"Steam SDK","text":"<p>Steam SDK allows you to use many features that don't come with Unreal Engine's Steam Subsystem. Unreal Engine's subsystem is a common subsystem for different online services, so it doesn't have all the Steam specific features. It only provides features that are common to the different online services like <code>EOS(Epic Online Services)</code>, <code>PlayFab</code>, <code>Steam</code>, <code>Xbox Live</code>, <code>PlayStation(PSN)</code> etc.</p> <p>Using Steam SDK you can leverage Steam specific features such as  </p> <ul> <li>Game Notification</li> <li>Stats and Achievement</li> <li>Steam Cloud</li> <li>Steam DRM</li> <li>Steam Inventory Service</li> <li>Steam Leaderboards</li> <li>Valve Anti-Cheat</li> </ul> <p>and many other features. </p> <p>To get an overview of them all check out this page from Steam SDK's documentation : Steamworks Features</p>"},{"location":"Unreal%20Engine/Steam%20SDK/Player%20Avatar/","title":"Steam Player Avatar","text":"<p>Steam has the profile picture you set in three different sizes</p> <ul> <li>Small (32 x 32 px) </li> <li>Medium (64 x 64 px)</li> <li>Large (128 x 128 px)</li> </ul> <p>You can retrieve and use them in your game, note that the Small and Medium avatar are readily available to use, but the for the Large avatar you need to request and get it asynchronously.</p>"},{"location":"Unreal%20Engine/Steam%20SDK/Player%20Avatar/#getting-player-avatar","title":"Getting Player Avatar","text":""},{"location":"Unreal%20Engine/Steam%20SDK/Setup/","title":"Setup","text":"<p>There are two ways you can set up Steam SDK, </p> <ul> <li>METHOD - 1 : Download the SDK and link it to your project </li> <li>METHOD - 2 :  Use the one that comes with Unreal Engine </li> </ul>"},{"location":"Unreal%20Engine/Steam%20SDK/Setup/#downloading-and-linking-method-1","title":"Downloading and linking - METHOD 1","text":"<p>In this method, we download the Steam SDK from the Steam website and link it to the project. </p>"},{"location":"Unreal%20Engine/Steam%20SDK/Setup/#step-1-download-the-sdk-from-steamworks","title":"Step 1 : Download the SDK from SteamWorks","text":"<p>You can download the SDK from here : Steam SDK You would have to log in with your Steam Account to download it</p>"},{"location":"Unreal%20Engine/Steam%20SDK/Setup/#step-2-adding-and-linking-to-your-project","title":"Step 2 : Adding and linking to your project","text":""},{"location":"Unreal%20Engine/Steam%20SDK/Setup/#placing-the-headers-and-libraries","title":"Placing the headers and libraries","text":"<ul> <li>After downloading the SDK, extract the folder.</li> <li>You will be able to find a folder called <code>steam</code> with all the header files in  <code>sdk/public/</code>.</li> <li>The best directory to put this <code>steam</code> folder would be in your project's source directory, so put it under <code>Source/ThirdParty/</code>, it goes by the Unreal Engine standard.</li> <li>Now we need to get the <code>steam_api64.dll</code> which is in the <code>sdk/redistributable_bin/win64</code> and add it to your <code>Binaries/Win64</code> in your game project folder, but it might be a hassle  to put this everytime you rebuild your project, so I have a tip for that, just follow along.</li> <li>Now copy the <code>lib</code> and <code>dll</code> file in the sdk/redistributable_bin/win64 and put it in the <code>Source/ThirdParty/steam/lib/</code> folder.</li> </ul>"},{"location":"Unreal%20Engine/Steam%20SDK/Setup/#including-the-headers-and-lib-to-the-project-using-buildcs-file","title":"Including the headers and lib to the project using Build.cs file","text":"<p>As I said, it might be hassle to copy the <code>dll</code> file all the time, so I have included the <code>Build.cs</code> code that automatically put the <code>dll</code> file in <code>steam/lib</code> to the <code>Binaries</code> folder. </p> <p>Build.cs File</p> <p>This is the configuration file that Unreal Engine uses to build your project, it can be found in your project's <code>Source/Project_Name/</code> folder with the name <code>Project_Name.Build.cs</code>.</p> <pre><code>using System.IO;\nusing UnrealBuildTool;\n\npublic class ThirdPersonTemplate : ModuleRules\n{\n    public ThirdPersonTemplate(ReadOnlyTargetRules Target) : base(Target)\n    {\n        PCHUsage = PCHUsageMode.UseExplicitOrSharedPCHs;\n\n        PublicDependencyModuleNames.AddRange(new string[] { \"Core\", \"CoreUObject\", \"Engine\", \"InputCore\", \"Sockets\", \"Networking\", \"Http\", \"Json\", \"JsonUtilities\", \"MoviePlayer\", \"UMG\", \"Slate\", \"SlateCore\" });\n\n        PrivateDependencyModuleNames.AddRange(new string[] {  });\n\n        if (Target.Platform == UnrealTargetPlatform.Win64)\n                PublicAdditionalLibraries.Add(Path.Combine(ModuleDirectory, \"Steam\", \"lib\", \"steam_api64.lib\"));\n        else if (Target.Platform == UnrealTargetPlatform.Linux)\n            PublicAdditionalLibraries.Add(Path.Combine(ModuleDirectory, \"Steam\", \"lib\", \"libsteam_api.so\"));\n\n        try\n        {\n            string SteamDLLFileName = \"steam_api64.dll\";\n            string SteamDLLPath = Path.Combine(ModuleDirectory, \"Steam\", \"lib\", SteamDLLFileName);\n            string ProjectPath = Directory.GetParent(ModuleDirectory).Parent.ToString();\n            string BinariesDir = Path.Combine(ProjectPath, \"Binaries\", Target.Platform.ToString());\n\n            if (!Directory.Exists(BinariesDir))\n                Directory.CreateDirectory(BinariesDir);\n\n            File.Copy(SteamDLLPath, Path.Combine(BinariesDir, SteamDLLFileName), true);\n        } catch { }\n    }\n}\n</code></pre> <p>I got this code from this GitHub Gist : Build Code Repo </p>"},{"location":"Unreal%20Engine/Steam%20SDK/Setup/#what-it-does","title":"What It Does?","text":"<p>This code links the <code>lib</code> and <code>dll</code> file to the project. </p>"},{"location":"Unreal%20Engine/Steam%20SDK/Setup/#step-3-creating-the-steam_appidtxt-file","title":"Step 3: Creating the steam_appid.txt file","text":"<p>If you don't have a DevAppID for your game, then create a file called <code>steam_appid.txt</code> and put it in your root folder. In the file just add <code>480</code> in the first line, this is the Steam AppID that Steam provides for developers to test. The Steam API requires this file otherwise it won't work.</p>"},{"location":"Unreal%20Engine/Steam%20SDK/Setup/#step-4-including-in-project-and-testing","title":"Step 4 : Including in Project and Testing","text":""},{"location":"Unreal%20Engine/Steam%20SDK/Setup/#including","title":"Including","text":"<p>If you had followed along and put the <code>steam</code> folder wit the header file, then you can include like this, otherwise give the correct include path.</p> <p>You can see that, some warnings are disabled while including the <code>steam_api.h</code> and then reset, this is because, the <code>steam_api.h</code> header files gives off some compiler warning, I'm pretty sure they are harmless and probably are better faster method that Steam developers came up with.</p> <pre><code>#pragma warning(push) // Disable warnings\n#pragma warning(disable : 4996)\n#include \"ThirdParty/steam/steam_api.h\"\n#pragma warning(pop)\n</code></pre>"},{"location":"Unreal%20Engine/Steam%20SDK/Setup/#time-for-testing","title":"Time for testing!","text":"<p>Add this following code to the BeginPlay and run your project, if you have set up everything correctly then you will be able to see your SteamID on your output log.</p> <p>Steam must be running</p> <p>Make sure to have Steam running obviously otherwise it won't work</p> <pre><code>    if (SteamAPI_Init())\n    {\n        if (SteamUser() &amp;&amp; SteamFriends())\n        {\n            const CSteamID PlayerID = SteamUser()-&gt;GetSteamID();\n            UE_LOG(SteamHelperSubsystem, Warning, TEXT(\"MySteamID : %llu\"), PlayerID.ConvertToUint64());\n        }\n        else\n        {\n            UE_LOG(SteamHelperSubsystem, Warning, TEXT(\"Steam not running\"));\n        }\n    }\n</code></pre>"},{"location":"Unreal%20Engine/Steam%20SDK/Setup/#use-the-one-that-comes-with-unreal-engine-method-2","title":"Use the one that comes with Unreal Engine - METHOD 2","text":"<p>If you check the <code>Engine/Source/ThirdParty</code> in your Unreal Engine installation folder you will be able to find a folder called <code>SteamWorks</code>, which actually has SteamSDK. So Unreal Engine actually has SteamSDK since the SteamSubsystem uses it.</p>"},{"location":"Unreal%20Engine/Steam%20SDK/Setup/#why-would-you-use-that","title":"Why would you use that?","text":"<p>Well, there are some advantages</p> <ul> <li>If you use SteamSubsystem in your project then using different versions might cause bugs, so using the same headers and libs that Unreal Engine uses will prevent those bugs</li> <li>You don't need to download and setup, linking the one that is in Unreal Engine is easier</li> </ul>"},{"location":"Unreal%20Engine/Steam%20SDK/Setup/#how-to-link-it","title":"How to link it?","text":"<p>Just add this to your project's <code>Build.cs</code> file. If you notice that the path just start as ThirdParty this is because, by default, Unreal Engine's <code>Source</code> folder is considered as the root, so I have combined the rest of the path here to the library file.</p> <p>Version Name</p> <p>Different version of Unreal Engine has different SteamSDK version, so change the <code>Steamv153</code> with the appropriate version you have in your Unreal Engine installation folder.</p> <pre><code>PublicAdditionalLibraries.Add(Path.Combine(\"ThirdParty\", \"Steamworks\", \"Steamv153\", \"sdk\", \"redistributable_bin\", \"win64\", \"steam_api64.lib\"));\n</code></pre>"},{"location":"Unreal%20Engine/Steam%20SDK/Setup/#should-i-put-the-steam_api64dll-file-to-the-binaries-folder","title":"Should I put the steam_api64.dll file to the Binaries folder?","text":"<p>Well, it's not required if you have <code>SteamSubsystem</code> enabled, as Unreal Engine automatically puts it for you when you build your project. Otherwise, you might have to.</p>"},{"location":"Unreal%20Engine/Steam%20SDK/Setup/#including-and-testing","title":"Including and Testing","text":"<p>You can include it in your project like this</p> <p>Version Name</p> <p>Different version of Unreal Engine has different SteamSDK version, so change the <code>Steamv153</code> with the appropriate version you have in your Unreal Engine installation folder.</p> <pre><code>#pragma warning(push) // Disable warnings\n#pragma warning(disable : 4996)\n#include \"Steamworks/Steamv153/sdk/public/steam/steam_api.h\"\n#pragma warning(pop)\n</code></pre> <p>Test it with the code I have included in the first method : Testing</p>"}]}